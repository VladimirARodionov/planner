name: ${COMPOSE_PROJECT_NAME}
services:
  postgres:
    build:
      dockerfile: Dockerfile_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USER}
      - WEBDAV_LOGIN=${WEBDAV_LOGIN}
      - WEBDAV_PASSWORD=${WEBDAV_PASSWORD}
      - WEBDAV_URL=${WEBDAV_URL}
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - TZ=${TZ}
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - planner-network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BOT_TOKEN=${BOT_TOKEN}
      - TZ=${TZ}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - ./logs:/app/logs
    ports:
      - "${BACKEND_PORT}:5000"
    networks:
      - planner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    networks:
      - planner-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:

networks:
  planner-network:
    driver: bridge