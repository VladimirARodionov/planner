name: ${COMPOSE_PROJECT_NAME}
services:
  postgres:
    build:
      dockerfile: Dockerfile_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USER}
      - WEBDAV_LOGIN=${WEBDAV_LOGIN}
      - WEBDAV_PASSWORD=${WEBDAV_PASSWORD}
      - WEBDAV_URL=${WEBDAV_URL}
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - TZ=${TZ}
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - BOT_TOKEN=${TELEGRAM_TOKEN}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key}
      - TZ=${TZ}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-PRODUCTION}
      - FRONTEND_URL=${FRONTEND_URL}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - BACKEND_URL=${BACKEND_URL}
      - BACKEND_PORT=${BACKEND_PORT}
      - RUN_BOT=0
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - ./logs:/app/logs
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - TZ=${TZ}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  telegram-bot:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - BOT_TOKEN=${TELEGRAM_TOKEN}
      - TZ=${TZ}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-PRODUCTION}
      - FRONTEND_URL=${FRONTEND_URL}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - BACKEND_URL=${BACKEND_URL}
      - BACKEND_PORT=${BACKEND_PORT}
      - RUN_BOT=1
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_data:
