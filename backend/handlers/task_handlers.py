import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram_dialog import DialogManager, StartMode

from backend.database import get_session, create_user_settings
from backend.locale_config import i18n
from backend.services.task_service import TaskService
from backend.services.auth_service import AuthService
from backend.services.settings_service import SettingsService
from backend.dialogs.task_dialogs import TaskDialog


router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
    
    async with get_session() as session:
        auth_service = AuthService(session)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await auth_service.get_user_by_id(str(user_id))
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
            user = await auth_service.create_user(
                telegram_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await create_user_settings(user.telegram_id, session)
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_service = SettingsService(session)
            statuses = await settings_service.get_statuses(str(user_id))
            if not statuses:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–æ–∑–¥–∞–µ–º –∏—Ö")
                try:
                    await create_user_settings(user.telegram_id, session)
                    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
    await message.answer(i18n.format_value("started"))


@router.message(Command("stop"))
async def stop_command(message: Message):
    await message.answer(i18n.format_value("stopped"))

@router.message(Command("tasks"))
async def list_tasks(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    async with get_session() as session:
        task_service = TaskService(session)
        tasks = await task_service.get_tasks(str(message.from_user.id))
        
        if not tasks:
            await message.answer(i18n.format_value("tasks-empty"))
            return

        response = i18n.format_value("tasks-header") + "\n\n"
        for task in tasks:
            status_emoji = "‚úÖ" if task['status'] and task['status']['code'] == 'completed' else "‚è≥"
            priority_emoji = "üî¥" if task['priority'] and task['priority']['name'].lower() == '–≤—ã—Å–æ–∫–∏–π' else "üü°" if task['priority'] and task['priority']['name'].lower() == '—Å—Ä–µ–¥–Ω–∏–π' else "üü¢"
            
            response += i18n.format_value("task-item", {
                "status_emoji": status_emoji,
                "priority_emoji": priority_emoji,
                "id": task['id'],
                "title": task['title']
            }) + "\n"
            
            if task['description']:
                response += i18n.format_value("task-description-line", {
                    "description": task['description']
                }) + "\n"
                
            if task['deadline']:
                response += i18n.format_value("task-deadline-line", {
                    "deadline": task['deadline']
                }) + "\n"
                
            response += "\n"

        await message.answer(response)

@router.message(Command("add_task"))
async def start_add_task(message: Message, dialog_manager: DialogManager):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    await dialog_manager.start(TaskDialog.title, mode=StartMode.NORMAL)

@router.message(Command("delete_task"))
async def delete_task(message: Message):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        task_id = int(message.text.split()[1])
        async with get_session() as session:
            task_service = TaskService(session)
            success = await task_service.delete_task(str(message.from_user.id), task_id)
            
            if success:
                await message.answer(i18n.format_value("task-deleted", {"id": task_id}))
            else:
                await message.answer(i18n.format_value("task-delete-error", {"id": task_id}))
    except (IndexError, ValueError):
        await message.answer(i18n.format_value("task-delete-usage"))

@router.message(Command("help"))
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        i18n.format_value("help-header") + "\n\n" +
        i18n.format_value("help-tasks") + "\n" +
        i18n.format_value("help-add-task") + "\n" +
        i18n.format_value("help-delete-task") + "\n" +
        "\n" +
        i18n.format_value("settings_command_help") + "\n" +
        i18n.format_value("settings_statuses_command_help") + "\n" +
        i18n.format_value("settings_priorities_command_help") + "\n" +
        i18n.format_value("settings_durations_command_help") + "\n" +
        i18n.format_value("settings_task_types_command_help") + "\n" +
        i18n.format_value("create_settings_command_help") + "\n" +
        "\n" +
        i18n.format_value("help-help")
    )
    await message.answer(help_text)

@router.message(Command("settings"))
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=i18n.format_value("settings_statuses"),
            callback_data="settings_statuses"
        )],
        [InlineKeyboardButton(
            text=i18n.format_value("settings_priorities"),
            callback_data="settings_priorities"
        )],
        [InlineKeyboardButton(
            text=i18n.format_value("settings_durations"),
            callback_data="settings_durations"
        )],
        [InlineKeyboardButton(
            text=i18n.format_value("settings_task_types"),
            callback_data="settings_task_types"
        )]
    ])
    
    await message.answer(
        i18n.format_value("settings_header"),
        reply_markup=keyboard
    )

@router.callback_query(F.data == "settings_statuses")
async def on_settings_statuses_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ settings_statuses –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        statuses = await settings_service.get_statuses(str(user_id))
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(statuses) if statuses else 0} —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not statuses:
            logger.warning(f"–°—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await callback_query.message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_statuses") + "\n\n"
        for status in statuses:
            logger.debug(f"–°—Ç–∞—Ç—É—Å: {status}")
            response += f"‚Ä¢ {status['name']} ({status['code']})\n"
            response += f"  –¶–≤–µ—Ç: {status['color']}\n"
            response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if status['is_default'] else '‚ùå'}\n"
            response += f"  –§–∏–Ω–∞–ª—å–Ω—ã–π: {'‚úÖ' if status['is_final'] else '‚ùå'}\n\n"
            
        await callback_query.message.answer(response)

@router.callback_query(F.data == "settings_priorities")
async def on_settings_priorities_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ settings_priorities –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        priorities = await settings_service.get_priorities(str(user_id))
        
        if not priorities:
            await callback_query.message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_priorities") + "\n\n"
        for priority in priorities:
            response += f"‚Ä¢ {priority['name']}\n"
            response += f"  –¶–≤–µ—Ç: {priority['color']}\n"
            response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if priority['is_default'] else '‚ùå'}\n\n"
            
        await callback_query.message.answer(response)

@router.callback_query(F.data == "settings_durations")
async def on_settings_durations_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ settings_durations –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        durations = await settings_service.get_durations(str(user_id))
        
        if not durations:
            await callback_query.message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_durations") + "\n\n"
        for duration in durations:
            try:
                response += f"‚Ä¢ {duration['name']}\n"
                if 'duration_type' in duration:
                    response += f"  –¢–∏–ø: {duration['duration_type']}\n"
                elif 'type' in duration:
                    response += f"  –¢–∏–ø: {duration['type']}\n"
                response += f"  –ó–Ω–∞—á–µ–Ω–∏–µ: {duration['value']}\n"
                response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if duration['is_default'] else '‚ùå'}\n\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {duration}")
            
        await callback_query.message.answer(response)

@router.callback_query(F.data == "settings_task_types")
async def on_settings_task_types_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ settings_task_types –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        task_types = await settings_service.get_task_types(str(user_id))
        
        if not task_types:
            await callback_query.message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_task_types") + "\n\n"
        for task_type in task_types:
            response += f"‚Ä¢ {task_type['name']}\n"
            if task_type.get('description'):
                response += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {task_type['description']}\n"
            response += f"  –¶–≤–µ—Ç: {task_type['color']}\n"
            response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if task_type['is_default'] else '‚ùå'}\n\n"
            
        await callback_query.message.answer(response)

@router.message(Command("create_settings"))
async def create_settings_command(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /create_settings –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        auth_service = AuthService(session)
        user = await auth_service.get_user_by_id(str(user_id))
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await create_user_settings(user.telegram_id, session)
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

@router.message(Command("settings_statuses"))
async def show_statuses_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á"""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        statuses = await settings_service.get_statuses(str(user_id))
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(statuses) if statuses else 0} —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not statuses:
            logger.warning(f"–°—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_statuses") + "\n\n"
        for status in statuses:
            logger.debug(f"–°—Ç–∞—Ç—É—Å: {status}")
            response += f"‚Ä¢ {status['name']} ({status['code']})\n"
            response += f"  –¶–≤–µ—Ç: {status['color']}\n"
            response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if status['is_default'] else '‚ùå'}\n"
            response += f"  –§–∏–Ω–∞–ª—å–Ω—ã–π: {'‚úÖ' if status['is_final'] else '‚ùå'}\n\n"
            
        await message.answer(response)

@router.message(Command("settings_priorities"))
async def show_priorities_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á"""
    user_id = message.from_user.id
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        priorities = await settings_service.get_priorities(str(user_id))
        
        if not priorities:
            await message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_priorities") + "\n\n"
        for priority in priorities:
            response += f"‚Ä¢ {priority['name']}\n"
            response += f"  –¶–≤–µ—Ç: {priority['color']}\n"
            response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if priority['is_default'] else '‚ùå'}\n\n"
            
        await message.answer(response)

@router.message(Command("settings_durations"))
async def show_durations_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∑–∞–¥–∞—á"""
    user_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        durations = await settings_service.get_durations(str(user_id))
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(durations) if durations else 0} –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not durations:
            logger.warning(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_durations") + "\n\n"
        for duration in durations:
            try:
                response += f"‚Ä¢ {duration['name']}\n"
                if 'duration_type' in duration:
                    response += f"  –¢–∏–ø: {duration['duration_type']}\n"
                elif 'type' in duration:
                    response += f"  –¢–∏–ø: {duration['type']}\n"
                response += f"  –ó–Ω–∞—á–µ–Ω–∏–µ: {duration['value']}\n"
                response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if duration['is_default'] else '‚ùå'}\n\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {duration}")
            
        await message.answer(response)

@router.message(Command("settings_types"))
async def show_task_types_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
    user_id = message.from_user.id
    
    async with get_session() as session:
        settings_service = SettingsService(session)
        task_types = await settings_service.get_task_types(str(user_id))
        
        if not task_types:
            await message.answer(i18n.format_value("settings_not_found"))
            return
            
        response = i18n.format_value("settings_task_types") + "\n\n"
        for task_type in task_types:
            response += f"‚Ä¢ {task_type['name']}\n"
            if task_type.get('description'):
                response += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {task_type['description']}\n"
            response += f"  –¶–≤–µ—Ç: {task_type['color']}\n"
            response += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ' if task_type['is_default'] else '‚ùå'}\n\n"
            
        await message.answer(response) 